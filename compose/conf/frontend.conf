user root;
worker_processes 10;
events {
    worker_connections 1024;
}

error_log /dev/stderr debug;

env X509_CERT_DIR=/etc/grid-security/certificates;

thread_pool default threads=32 max_queue=65536;

http {

    log_format bodylog '$remote_addr - $remote_user [$time_local] \n'
      '"$request" $status $body_bytes_sent \n'
      '"$ssl_client_i_dn"\n'
      '"$ssl_client_s_dn"\n'
      '"$http_referer" "$http_user_agent" $request_time"\n'
      '"$proxy_host"\n'
      '$upstream_cache_status [$time_local]\n'
      ;    

    include /opt/ibm/router/nginx/conf/mime.types;
    default_type application/octet-stream;

    add_header X-Proxy-Cache $upstream_cache_status;
    add_header X-Handled-By $proxy_host;

    lua_package_path '~/lua/?.lua;;';
    lua_ssl_verify_depth 100;
    lua_ssl_trusted_certificate /etc/pki/tls/certs/ca-bundle.crt;
    lua_shared_dict introspection 10m;

    server {
        set $resp_body "";
        body_filter_by_lua '
        local resp_body = string.sub(ngx.arg[1], 1, 1000)
        ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
        if ngx.arg[2] then
          ngx.var.resp_body = ngx.ctx.buffered
        end
        ';

        access_log /dev/stdout bodylog;
        listen 8085;
        server_name frontend;

        resolver dns;

	location / {
	    set $proxy '';

	    access_by_lua_block {

		  local function dump(o)
		     if type(o) == 'table' then
		        local s = '{ '
		        for k,v in pairs(o) do
		           if type(k) ~= 'number' then k = '"'..k..'"' end
		           s = s .. '['..k..'] = ' .. dump(v) .. ','
		        end
		        return s .. '} '
		     else
		        return tostring(o)
		     end
		  end

	          local function notAuthorized()
	            ngx.status = 401
	            ngx.header.content_type = 'application/json'
	            ngx.print('{"error":"user not recognized or not authorized"}\n')
	            ngx.exit(401)
	          end

	          local opts = {
	            discovery = "https://${IAM_HOST}/.well-known/openid-configuration",
	            token_signing_alg_values_expected = {"RS256"},
	            accept_none_alg = false,
	            accept_unsupported_alg = false,
	            jwk_expires_in = 24 * 60 * 60
	          }

	          local res, err = require("resty.openidc").bearer_jwt_verify(opts)
                 
                  if err == "no Authorization header found" then		
                    ngx.status = 403
                    ngx.print('{"error":"no access_token provided"}\n')
                    ngx.exit(ngx.HTTP_FORBIDDEN)
		  end

                  if not res then
                    ngx.status = 403
                    ngx.print('{"error":"access_token is invalid or a problem occurred contacting IAM"}\n')
                    ngx.exit(ngx.HTTP_FORBIDDEN)
                  end

                  if err then
                    ngx.status = 500
                    ngx.say(err)
                    ngx.exit(ngx.HTTP_INTERNAL_SERVER_ERROR)
                  end

                  -- ngx.print(dump(res))

                  local authz = false

		  for _,v in pairs(res["groups"]) do
		    if v == "indigo-dc" then
		      authz = true
		      break
		    end
		  end

	          if authz then
                    ngx.var.proxy = 'backend:8085';
	          else
	            return notAuthorized();
	          end

	    }

	    proxy_pass            http://$proxy;
        }
   }
}
